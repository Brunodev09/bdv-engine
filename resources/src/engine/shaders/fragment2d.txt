#version 400 core

in vec2 passTextureCoordinates;
in vec4 vertexPosition;

layout(location = 0) out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 colorOffset;
uniform vec3 ambientLight;

vec2 lightPos = vec2(0.4, 0.3);
vec3 lightCol = vec3(1, 1, 1);
float lightIntensity = 0.8;

void main(void) {
    vec4 pixelColor = texture(textureSampler, passTextureCoordinates);

    if (pixelColor.a < 1.0) discard;

    float distance = distance(lightPos, vertexPosition.xy);
    float diffuse = 0.0;

    if (distance <= lightIntensity) diffuse =  1.0 - abs(distance / lightIntensity);
    if (diffuse <= 0.3) diffuse = 0.3;

    out_Color = vec4(colorOffset, 1.0) * vec4(min(pixelColor.rgb * ((lightCol * diffuse) + ambientLight),
    pixelColor.rgb), 1.0);
}