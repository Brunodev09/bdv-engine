#version 400 core

in vec2 passTextureCoordinates;
in vec4 vertexPosition;

layout(location = 0) out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 colorOffset;

uniform float tick;

uniform bool toggleAmbientLight;
uniform vec3 ambientLight;

uniform bool toggleGlow;
uniform vec3 glowColor;

uniform bool debugShader;

// Applying effects on chunked-tilest-based rendering
// 24 * 24 * 5
int sizeOfUniform = 3456;
uniform float colorTileset[3456];
uniform vec2 tileSize;
uniform int numberOfTilesOnScreen;
uniform bool chunkRendering;

vec4 applyAmbientLighting(vec4 uv, vec4 pixelColor) {
    vec4 outputFragment;
    vec2 lightPos = vec2(0.4, 0.3);
    vec3 lightCol = vec3(1, 1, 1);
    float lightIntensity = 0.8;

    float distance = distance(lightPos, uv.xy);
    float diffuse = 0.0;

    if (distance <= lightIntensity) diffuse =  1.0 - abs(distance / lightIntensity);
    if (diffuse <= 0.3) diffuse = 0.3;

    outputFragment = vec4(colorOffset, 1.0) * vec4(min(pixelColor.rgb * ((lightCol * diffuse) + ambientLight),
                pixelColor.rgb), 1.0);

    return outputFragment;
}

float applyGlow(vec4 uv, vec2 p, float r, float blur) {
//    uv -= vec4(1, 0.5, 0, 0);
    float d = length(uv.xy - p);
    return smoothstep(r, r-blur, d);
}

vec3 shaderPlay(vec4 uv) {
    vec3 originalMask = vec3(applyGlow(uv, vec2(-0.5 * sin(tick), 0.5 * cos(tick)), 0.3, 0.5));
    vec3 mask2 = vec3(applyGlow(uv, vec2(-0.2 * sin(tick), -0.6 * cos(tick)), 0.3, 0.4));
    vec3 mask3 = vec3(applyGlow(uv, vec2(-0.2 * -0.5*cos(tick), -0.0 * sin(tick * 2.0)), 0.3, 0.4));
    vec3 mask4 = vec3(applyGlow(uv, vec2(-0.2 * sin(tick), -0.5 * sin(tick * 2.0)), 0.5 * cos(tick), 0.4));

    vec3 colorBlend = vec3(0.0, 0.0, 1.0) * originalMask;
    colorBlend += vec3(1.0, 0.0, -1.0) * mask2;
    colorBlend += vec3(0.0, 1.0, 0.0) * mask3;
    colorBlend += vec3(1.0, 1.0, 0.0) * mask4;

    return colorBlend;
}

void main(void) {

    if (debugShader) {
        out_Color = vec4(shaderPlay(vertexPosition), 1.0);
        return;
    }

    vec4 pixelColor = texture(textureSampler, passTextureCoordinates);
        vec4 outputColor;

        if (pixelColor.a < 1.0) discard;

        outputColor = vec4(colorOffset, 1.0) * pixelColor;

        if (toggleAmbientLight) {
            outputColor = applyAmbientLighting(vertexPosition, pixelColor);
        }

        if (toggleGlow) {
            float mask = applyGlow(vertexPosition, vec2(0.5), 0.3, 0.2);
            outputColor = vec4(glowColor, 1.0) * mask;
            outputColor += pixelColor;
            if (toggleAmbientLight) {
                outputColor += applyAmbientLighting(vertexPosition, pixelColor);
            }
        }

        if (chunkRendering) {
            for (int i = 0; i < 2745; i+=5) {
                    float xOnNormalizedScreen = colorTileset[i];
                    float yOnNormalizedScreen = colorTileset[i + 1];

                    if (xOnNormalizedScreen == 0 || xOnNormalizedScreen == 0) continue;

                    vec3 effectToApply = vec3(colorTileset[i + 2], colorTileset[i + 3], colorTileset[i + 4]);

                    vec2 p1 = vec2(xOnNormalizedScreen * tileSize.x, yOnNormalizedScreen * tileSize.y);
                    vec2 p2 = vec2(0, 0);
                    vec2 p3 = vec2(0, 0);
                    vec2 p4 = vec2(0, 0);

                    if (p1.x > 0 && p1.y > 0) {
                        p2.x = p1.x - tileSize.x;
                        p2.y = p1.y;

                        p3.x = p1.x - tileSize.x;
                        p3.y = p1.y - tileSize.y;

                        p4.x = p1.x;
                        p4.y = p1.y - tileSize.y;

                        if (vertexPosition.x > p2.x && vertexPosition.x < p1.x) {
                            if (vertexPosition.y < p2.y && vertexPosition.y > p3.y) {
                                outputColor = vec4(effectToApply, 1.0) * outputColor;
                            }
                        }
                    }
                    else if (p1.x < 0 && p1.y > 0) {
                        p2.x = p1.x + tileSize.x;
                        p2.y = p1.y;

                        p3.x = p1.x + tileSize.x;
                        p3.y = p1.y - tileSize.y;

                        p4.x = p1.x;
                        p4.y = p1.y - tileSize.y;

                        if (vertexPosition.x > p1.x && vertexPosition.x < p2.x) {
                            if (vertexPosition.y > p3.y && vertexPosition.y < p2.y) {
                                outputColor = vec4(effectToApply, 1.0) * outputColor;
                            }
                        }
                    }
                    else if (p1.x < 0 && p1.y < 0) {
                        p2.x = p1.x + tileSize.x;
                        p2.y = p1.y;

                        p3.x = p1.x + tileSize.x;
                        p3.y = p1.y + tileSize.y;

                        p4.x = p1.x;
                        p4.y = p1.y + tileSize.y;

                        if (vertexPosition.x > p1.x && vertexPosition.x < p2.x) {
                            if (vertexPosition.y > p1.y && vertexPosition.y < p3.y) {
                                outputColor = vec4(effectToApply, 1.0) * outputColor;
                            }
                        }
                    }
                    else if (p1.x > 0 && p1.y < 0) {
                        p2.x = p1.x - tileSize.x;
                        p2.y = p1.y;

                        p3.x = p1.x - tileSize.x;
                        p3.y = p1.y + tileSize.y;

                        p4.x = p1.x;
                        p4.y = p1.y + tileSize.y;

                        if (vertexPosition.x > p3.x && vertexPosition.x < p4.x) {
                            if (vertexPosition.y > p2.y && vertexPosition.y < p4.y) {
                                outputColor = vec4(effectToApply, 1.0) * outputColor;
                            }
                        }
                    }
                }
        }

        out_Color = outputColor;
}

